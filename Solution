import java.io.*;
import java.util.*;
import org.json.simple.*;
import org.json.simple.parser.*;

public class SecretFinder {
    
    public static void main(String[] args) throws Exception {
        // Reading and parsing JSON file
        JSONParser parser = new JSONParser();
        JSONObject input = (JSONObject) parser.parse(new FileReader("input.json"));
        
        // Extract n and k
        JSONObject keys = (JSONObject) input.get("keys");
        int n = Integer.parseInt(keys.get("n").toString());
        int k = Integer.parseInt(keys.get("k").toString());

        // Collect the (x, y) pairs
        List<int[]> points = new ArrayList<>();
        
        for (Object key : input.keySet()) {
            String keyStr = (String) key;
            if (!keyStr.equals("keys")) {
                int x = Integer.parseInt(keyStr);
                JSONObject root = (JSONObject) input.get(keyStr);
                int base = Integer.parseInt(root.get("base").toString());
                String value = root.get("value").toString();
                int y = Integer.parseInt(value, base);
                points.add(new int[]{x, y});
            }
        }

        // Calculate the constant term (c) using Lagrange Interpolation
        int constantTerm = lagrangeInterpolation(points, k);
        
        // Output the constant term
        System.out.println("Constant term (c): " + constantTerm);
    }

    // Lagrange interpolation to find constant term
    public static int lagrangeInterpolation(List<int[]> points, int k) {
        int constant = 0;

        // Loop through each point for interpolation
        for (int i = 0; i < k; i++) {
            int[] pointI = points.get(i);
            int xi = pointI[0];
            int yi = pointI[1];

            double term = yi;

            for (int j = 0; j < k; j++) {
                if (i != j) {
                    int xj = points.get(j)[0];
                    term *= (0 - xj) / (double)(xi - xj);
                }
            }

            constant += term;
        }

        return (int) constant;
    }
}
